{"version":3,"sources":["components/Item.js","App.js","serviceWorker.js","index.js"],"names":["Item","state","console","log","this","props","litem","style","width","li","id","task","isCompleted","onClick","onEdit","Del","Component","ToList","listItem","detail","assignTo","deadLineDate","Date","isEdit","handlerChange","e","nam","target","name","val","value","t","type","setState","checked","handlerAdd","preventDefault","newitem","length","push","handlerDel","i","listItem1","filter","handlerEdit","handlerUpdate","ref","className","placeholder","onChange","color","title","accesskey","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.264a25d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/style.css';\r\nclass Item extends Component {\r\n    state = {  }\r\n\r\n    \r\n\r\n\r\n    render() { \r\n       console.log(this.props.litem) ;\r\n        return (  \r\n            <div>\r\n                    \r\n\r\n               <div style={{width: \"500px\"}}>\r\n               <table  >\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Task</th>\r\n                        <th>IS Completed</th>\r\n                        <th>Edit</th>\r\n                        <th>Delete</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                        { this.props.li.id}\r\n                        </td>\r\n                        <td>\r\n                        { this.props.li.task}\r\n                        </td>\r\n                        <td>\r\n                        { (this.props.li.isCompleted)?\"Completed\":\"Not Completed\"}\r\n                        </td>\r\n\r\n                        <td>\r\n                        <button  onClick={()=>this.props.onEdit(this.props.li.id)} >Edit</button>\r\n                        </td>\r\n                        <td>\r\n                        <button   onClick={()=>this.props.Del(this.props.li.id)} >Delete</button>\r\n                        \r\n                        </td>\r\n                    </tr>\r\n\r\n                </table>\r\n               </div>\r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Item;","\nimport React, { Component } from 'react';\nimport Item from './components/Item';\nclass ToList extends Component {\n  state = { \n      listItem:[],\n      id:0,\n      task:\"\",\n      detail:\"\",\n      assignTo:\"\",\n      isCompleted:false,\n      deadLineDate:Date(),\n      isEdit:false\n\n        \n   }\n   componentDidMount()\n   {\n   // this.nameInput.focus();\n  }\n   handlerChange = (e)=>\n   {\n     let nam= e.target.name;\n     let val= e.target.value;\n     let t= e.target.type;\n     switch (t)\n     {\n        case 'checkbox':\n          this.setState({[nam]:e.target.checked});\n          console.log([nam],val,t);break;\n          case 'text':\n          this.setState({[nam]:val});break;\n          default : break;\n\n     }\n    \n    \n   \n    \n   \n   \n   }\n\n   handlerAdd = (e) =>\n   {\n    \n\n     e.preventDefault();\n   // console.log(t);\n    const listItem = [...this.state.listItem];\n\n   \n   if (this.state.isEdit===false) \n   \n   {\n    const newitem={id:listItem.length+1,task:this.state.task,isCompleted:this.state.isCompleted};\n    listItem.push(newitem);\n    this.setState({listItem,task:\"\",isCompleted:false});\n   }\n   else {\n   // console.log(listItem[this.state.id].task); \n   listItem[this.state.id-1].task=this.state.task;\n   listItem[this.state.id-1].isCompleted=this.state.isCompleted;\n    this.setState({listItem,task:\"\",id:0,isEdit:false,isCompleted:false});\n  }\n    \n   // console.log(listItem);\n\n   }\nhandlerDel = (i)=>{\n\n //console.log(i);\nconst listItem = [...this.state.listItem];\nlet listItem1 = listItem.filter((li)=>li.id!==i);\nthis.setState({listItem:listItem1});\n\n}\nhandlerEdit = (i)=>\n{\n\n  const li=this.state.listItem.filter((li)=>li.id===i)\n  console.log(li[0].task,li[0].id,li[0].isCompleted);\n  this.setState({isEdit:true});\n   \n  this.setState({task:li[0].task,id:li[0].id,isCompleted:li[0].isCompleted});\n \n}\nhandlerUpdate = (i) =>\n{\n\n  console.log(i);\n}\n  render() { \n    return ( \n      \n        <div>\n             \n       \n                {/* <h1><span>{this.state.task}</span></h1> */}\n             <form ref=\"myForm\" className=\"myForm\">\n              <input type=\"text\" name=\"task\"\n               placeholder=\"Please Enter the Task\"\n               value={this.state.task}\n                onChange={this.handlerChange}\n                />\n                <br/>\n                <input type=\"text\" name=\"Detail\"\n               placeholder=\"Please Enter Task Detail\"\n               value={this.state.detail}\n                onChange={this.handlerChange}\n                />\n\n                <br></br>\n                <input type=\"checkbox\" id=\"IsCopleted\" \n                name=\"isCompleted\" value={this.state.isCompleted}\n                onChange={this.handlerChange}\n                />\n                \n    <label style={{color:(this.state.isCompleted)? \"Green\":\"Red\"}}>{(this.state.isCompleted)?\"Completed\":\"Not Complete\"}</label>\n                \n                 \n\n     \n          \n        \n             <hr/>\n              <button onClick={this.handlerAdd}\n              title= \"Shortcut: a\" accesskey = \"a\">{(this.state.isEdit===false) ? \"Add\":\"Update\"}</button>\n            \n             \n          </form>\n\n          {this.state.listItem.map((li)=>\n          <Item key={li.id} \n            li={li} \n            Del={this.handlerDel}\n            onEdit={this.handlerEdit}/>)}\n           \n          \n        </div>\n\n        \n\n      \n     );\n  }\n}\n \nexport default ToList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}